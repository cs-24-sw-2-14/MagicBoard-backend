openapi: 3.0.3

info:
  title: MagicBoard - Rest API
  description: |-
    the rest API for the MagicBoard  
  version: "1.0"

servers:
  - url: http://localhost:5123
  - url: http://magicboard.kresten.xyz:5123
  - url: http://magicboard.stjernholm.pw:5123
  - url: http://magicboard.fagerlund.io:5123
  - url: http://magicboard.nygaard.cloud:5123

tags:
  - name: Board
    description: Related to boards which includes the functions for creating and managing boards (UID's)
  - name: User
    description: Related to users of boards.
  - name: Color
    description: Related to colors that are in use in a board.

paths:
  /v1/board/validate_uid:
    get:
      tags:
        - Board
      summary: Validates a board UID
      description: Takes a board UID and validates it.
      operationId: validateUID
      parameters:
        - $ref: '#/components/parameters/board_id'
      responses:
        '200':
          description: Whether Board UID is valid.
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400':
          $ref: '#/components/responses/board_id_missing'

  /v1/board/exists:
    get:
      tags:
        - Board
      summary: Checks whether a board exists by UID
      description: Takes a board UID and checks whether the board exists.
      operationId: checkUID
      parameters:
        - $ref: '#/components/parameters/board_id'
      responses:
        '200':
          description: Whether the Board exists, based on Board UID.
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400':
          $ref: '#/components/responses/board_id_missing'

  /v1/board/create:
    post:
      tags:
        - Board
      summary: Creates a new board
      operationId: createBoard
      responses:
        '200':
          description: Returns Board UID of successfully create board.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/board_create_result'
  
  /v1/user/exists:
    get:
      tags:
        - User
      summary: Checks whether a user exists in a board.
      description: Takes a username and checks whether the username is taken.
      operationId: checkUsername
      parameters:
        - $ref: '#/components/parameters/board_id'
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Whether the User exists.
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400 Missing BoardID':
          $ref: '#/components/responses/board_id_missing'
        '400 Missing Username':
          $ref: '#/components/responses/username_missing'
        '404 Board not found':
          $ref: '#/components/responses/board_not_found'
  
  /v1/color/exists:
    get:
      tags:
        - Color
      summary: Checks whether a color already exists in a board.
      description: Takes a color and a board id, and checks whether the color exists.
      operationId: checkColor
      parameters:
        - $ref: '#/components/parameters/board_id'
        - $ref: '#/components/parameters/color'
      responses:
        '200':
          description: Whether the color exists.
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400 Missing BoardID':
          $ref: '#/components/responses/board_id_missing'
        '400 Missing Color':
          $ref: '#/components/responses/color_missing'
        '404 Board not found':
          $ref: '#/components/responses/board_not_found'

components:
  schemas:
    board_id:
      type: string
      minLength: 6
      maxLength: 6
      example: AB4D3G
    board_create_result:
      type: object
      properties:
        board_id:
          $ref: '#/components/schemas/board_id'
    username:
      type: string
      example: Testersen
    color:
      type: string
      example: Blue

  parameters:
    board_id:
      name: board_id
      in: query
      description: UID of a board.
      required: true
      schema:
        $ref: '#/components/schemas/board_id'
    username:
      name: username
      in: query
      description: Username of a user on a board.
      required: true
      schema:
        $ref: '#/components/schemas/username'
    color:
      name: color
      in: query
      description: Color value from available colors.
      required: true
      schema:
        $ref: '#/components/schemas/color'

  responses:
    board_id_missing:
      description: Board UID was not supplied.
      content:
        text/html:
          schema:
            type: string
            example: "<p>Parameter missing: board_id</p>"
    username_missing:
      description: Username was not supplied.
      content:
        text/html:
          schema:
            type: string
            example: "<p>Parameter missing: username</p>"
    color_missing:
      description: Color was not supplied.
      content:
        text/html:
          schema:
            type: string
            example: "<p>Parameter missing: color</p>"
    board_not_found:
      description: Provided board does not exist.
      content:
        text/html:
          schema:
            type: string
            example: "Board does not exist"